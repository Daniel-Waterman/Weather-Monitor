@page "/"
@using System
@using BlazorApp.Shared
@inject HttpClient _client

<PageTitle>SS6 Weather</PageTitle>

<h2>Current Conditions Dashboard</h2>

<h6>Update Time: @updateTime</h6>

<div class="container-fluid">
    @if (weatherData != null)
    {
        <div class="row row-colour-one">
            <div class="col"/>
            <div class="col">
                <b>Live Conditions</b>
            </div>
            <div class="col">
                <b>Extremes (Since 00:00 today)</b>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-temperature-half" aria-hidden="true"/>
                Temperature    
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.Temperature, 1) °C
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.TemperatureMaxMin.MinValue, 1) °C (@extremeRecords.TemperatureMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.TemperatureMaxMin.MaxValue, 1) °C (@extremeRecords.TemperatureMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-one">
            <div class="col">
                <i class="fa-solid fa-droplet" aria-hidden="true"/>
                Humidity
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.Humidity, 0) %
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.HumidityMaxMin.MinValue, 0) % (@extremeRecords.HumidityMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.HumidityMaxMin.MaxValue, 0) % (@extremeRecords.HumidityMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-droplet" aria-hidden="true"/>
                Dew Point
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.DewPoint, 1) °C
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.DewPointMaxMin.MinValue, 1) °C (@extremeRecords.DewPointMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.DewPointMaxMin.MaxValue, 1) °C (@extremeRecords.DewPointMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-one">
            <div class="col">
                <i class="fa-solid fa-gauge-simple" aria-hidden="true"/>
                Pressure
            </div>
            <div class="col">
                <div>@GetDisplayFloat(weatherData.SeaLevelPressure, 1) hPa</div>
                <div><small>(Station Pressure: @GetDisplayFloat(weatherData.StationPressure, 1) hPa)</small></div>
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.PressureMaxMin.MinValue, 1) hPa (@extremeRecords.PressureMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.PressureMaxMin.MaxValue, 1) hPa (@extremeRecords.PressureMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-wind" aria-hidden="true"/>
                Wind
            </div>
            <div class="col">
                <div class="hstack">
                    <div class="w-50">Minute Average</div>
                    <div>@GetDisplayFloat(weatherData.AvgWindSpeed, 1) kph</div>
                </div>
                <div class="hstack">
                    <div class="w-50">Gusting To</div>
                    <div>@GetDisplayFloat(weatherData.GustWindSpeed, 1) kph</div>
                </div>
                <div class="hstack">
                    <div class="w-50">Direction</div>
                    <div>@weatherData.WindDirection °</div>
                </div>
            </div>
            <div class="col">
                <div class="hstack">
                    <div class="w-50">Max Minute Average</div>
                    <div>@GetDisplayFloat(extremeRecords.maxAvgWind, 1) kph (@extremeRecords.maxAvgWindTime.ToShortTimeString())</div>
                </div>
                <div class="hstack">
                    <div class="w-50">Max Gust Speed</div>
                    <div>@GetDisplayFloat(extremeRecords.maxGustWind, 1) kph (@extremeRecords.maxGustWindTime.ToShortTimeString())</div>
                </div>
            </div>
        </div> 
        <div class="row row-colour-one">
            <div class="col">
                <i class="fa-solid fa-cloud-rain" aria-hidden="true"/>
                Rain
            </div>
            <div class="col">
                <div class="hstack">
                    <div class="w-50">Last Hour</div>
                    <div>@GetDisplayFloat(weatherData.RainfallTotal, 1) mm</div>
                </div>
                <div class="hstack">
                    <div class="w-50">Rain Rate</div>
                    <div>@GetDisplayFloat(weatherData.RainfallRate, 1) mm/hr</div>
                </div>
            </div>
            <div class="col">
                <div class="hstack">
                    <div class="w-50">Max Rain Rate</div>
                    @if (@extremeRecords.maxRainRate == 0)
                    {
                        <div>0 mm/hr (N/A)</div>
                    }
                    else
                    {
                        <div>@GetDisplayFloat(extremeRecords.maxRainRate, 1) mm/hr (@extremeRecords.maxRainRateTime.ToShortTimeString())</div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p><em>Dashboard Loading...</em></p>
    }
</div>



@code{
    private WeatherRecord? weatherData;
    private List<WeatherRecord> weatherRecords = new List<WeatherRecord>();
    private HistoricalRecordData extremeRecords = new HistoricalRecordData();
    private string updateTime => weatherData?.RecordTime.ToString("dd/MM/yyyy HH:mm") ?? "Not Found";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            weatherData = await _client.GetFromJsonAsync<WeatherRecord>("/api/GetMostRecent") ?? new WeatherRecord();
            GetHistoricData(); // Not awaiting this because it is to load data in the background
        }
        catch (Exception ex)
        {

        }
    }

    private async Task GetHistoricData()
    {
        try
        {
            weatherRecords = await _client.GetFromJsonAsync<List<WeatherRecord>>("/api/GetDailyData") ?? new List<WeatherRecord>();
            extremeRecords.NewData(weatherRecords);

            // Work out total rain in last hour, as total rain for previous minute is not helpful
            weatherData.RainfallTotal = 0; //Zero out total for last minute, so to add total for last hour below
            DateTime previousHourStart = DateTime.UtcNow.AddHours(-1);
            int index = 0;
            while (index < weatherRecords.Count && weatherRecords[index].RecordTime >= previousHourStart)
            {
                if (weatherRecords[index].RainfallTotal != -99)
                {
                    weatherData.RainfallTotal += weatherRecords[index].RainfallTotal;
                }
                index++;
            }
            StateHasChanged();
        }
        catch (Exception ex) { } 
    }

    private string GetDisplayFloat(float value, int decimalPlaces)
    {
        if (value == -99 || value == 2000) // Default values
        {
            return "No Data";
        }
        else
        {
            return Math.Round(value, decimalPlaces).ToString();
        }
    }
}


