@page "/"
@using System
@using BlazorApp.Shared
@inject HttpClient _client

<PageTitle>SS6 Weather</PageTitle>

<h1>Current Conditions Dashboard</h1>

<h6>Update Time: @updateTime</h6>



<div class="container">
    @if (weatherRecords.Count > 0)
    {
        <div class="row row-colour-one">
            <div class="col"/>
            <div class="col">
                <b>Live Conditions</b>
            </div>
            <div class="col">
                <b>Extremes (Since 00:00 today)</b>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-temperature-half" aria-hidden="true"/>
                Temperature    
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.Temperature, 1) °C
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.TemperatureMaxMin.MinValue, 1) °C (@extremeRecords.TemperatureMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.TemperatureMaxMin.MaxValue, 1) °C (@extremeRecords.TemperatureMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-one">
            <div class="col">
                <i class="fa-solid fa-droplet" aria-hidden="true"/>
                Humidity
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.Humidity, 0) %
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.HumidityMaxMin.MinValue, 0) % (@extremeRecords.HumidityMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.HumidityMaxMin.MaxValue, 0) % (@extremeRecords.HumidityMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-droplet" aria-hidden="true"/>
                Dew Point
            </div>
            <div class="col">
                @GetDisplayFloat(weatherData.DewPoint, 1) °C
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.DewPointMaxMin.MinValue, 1) °C (@extremeRecords.DewPointMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.DewPointMaxMin.MaxValue, 1) °C (@extremeRecords.DewPointMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-one">
            <div class="col">
                <i class="fa-solid fa-gauge-simple" aria-hidden="true"/>
                Pressure
            </div>
            <div class="col">
                <div>@GetDisplayFloat(weatherData.SeaLevelPressure, 1) hPa</div>
                <div><small>(Station Pressure: @GetDisplayFloat(weatherData.StationPressure, 1) hPa)</small></div>
            </div>
            <div class="col">
                <div>Min: @GetDisplayFloat(extremeRecords.PressureMaxMin.MinValue, 1) hPa (@extremeRecords.PressureMaxMin.MinValueTime.ToShortTimeString())</div>
                <div>Max: @GetDisplayFloat(extremeRecords.PressureMaxMin.MaxValue, 1) hPa (@extremeRecords.PressureMaxMin.MaxValueTime.ToShortTimeString())</div>
            </div>
        </div>
        <div class="row row-colour-two">
            <div class="col">
                <i class="fa-solid fa-wind" aria-hidden="true"/>
                Wind
            </div>
            <div class="col">
                <div class="hstack gap-1 d-flex justify-content-between">
                    <div>Minute Average</div>
                    <div>@GetDisplayFloat(weatherData.AvgWindSpeed, 1) kph</div>
                </div>
                <div class="hstack gap-1 d-flex justify-content-between">
                    <div>Gusting To</div>
                    <div>@GetDisplayFloat(weatherData.GustWindSpeed, 1) kph</div>
                </div>
                <div class="hstack gap-1 d-flex justify-content-between">
                    <div>Direction</div>
                    <div>@weatherData.WindDirection °</div>
                </div>
            </div>
            <div class="col">
                <div class="hstack gap-1 d-flex justify-content-between">
                    <div>Max Minute Average</div>
                    <div>@GetDisplayFloat(extremeRecords.maxAvgWind, 1) kph (@extremeRecords.maxAvgWindTime.ToShortTimeString())</div>
                </div>
                <div class="hstack gap-1 d-flex justify-content-between">
                    <div>Max Gust Speed</div>
                    <div>@GetDisplayFloat(extremeRecords.maxGustWind, 1) kph (@extremeRecords.maxGustWindTime.ToShortTimeString())</div>
                </div>
            </div>
        </div> 
        <div class="row">
            <div class="col">
                <i class="fa-solid fa-cloud-rain" aria-hidden="true"/>
                Rain
            </div>
            <div class="col">
                <h3>WIP</h3>
            </div>
        </div>
    }
    else
    {
        <p><em>Dashboard Loading...</em></p>
    }
</div>



@code{
    private WeatherRecord weatherData = new();
    private List<WeatherRecord> weatherRecords = new List<WeatherRecord>();
    private HistoricalRecordData extremeRecords = new HistoricalRecordData();
    private string updateTime => weatherData.RecordTime.ToString("dd/MM/yyyy HH:mm") ?? "Not Found";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            weatherRecords = await _client.GetFromJsonAsync<List<WeatherRecord>>("/api/GetDailyData") ?? new List<WeatherRecord>();
            getMostRecentData();
            extremeRecords.NewData(weatherRecords);
        }
        catch (Exception ex)
        {

        }
    }

    private void getMostRecentData()
    {
        int fieldsFilled = 0;
        int index = 0;
        weatherData.RecordTime = weatherRecords[0].RecordTime;
        do
        {
            WeatherRecord currentRecord = weatherRecords[index];
            if (weatherData.Temperature == -99) { weatherData.Temperature = currentRecord.Temperature; fieldsFilled++; }
            if (weatherData.Humidity == -99) { weatherData.Humidity = currentRecord.Humidity; fieldsFilled++; }
            if (weatherData.DewPoint == -99) { weatherData.DewPoint = currentRecord.DewPoint; fieldsFilled++; }
            if (weatherData.StationPressure == -99) { weatherData.StationPressure = currentRecord.StationPressure; fieldsFilled++; }
            if (weatherData.SeaLevelPressure == -99) { weatherData.SeaLevelPressure = currentRecord.SeaLevelPressure; fieldsFilled++; }
            if (weatherData.AvgWindSpeed == -99) { weatherData.AvgWindSpeed = currentRecord.AvgWindSpeed; fieldsFilled++; }
            if (weatherData.GustWindSpeed == -99) { weatherData.GustWindSpeed = currentRecord.GustWindSpeed; fieldsFilled++; }
            if (weatherData.WindDirection == -99) { weatherData.WindDirection = currentRecord.WindDirection; fieldsFilled++; }
            if (weatherData.RainfallTotal == -99) { weatherData.RainfallTotal = currentRecord.RainfallTotal; fieldsFilled++; }
            if (weatherData.RainfallRate == -99) { weatherData.RainfallRate = currentRecord.RainfallRate; fieldsFilled++; }
            index++;
        }
        while (fieldsFilled < 10);
    }

    private string GetDisplayFloat(float value, int decimalPlaces)
    {
        if (value == -99)
        {
            return "No Data";
        }
        else
        {
            return Math.Round(value, decimalPlaces).ToString();
        }
    }
}


