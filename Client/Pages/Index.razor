@page "/"
@using System
@using BlazorApp.Shared
@using BlazorApp.Client.Pages.DashboardCards;
@inject HttpClient _client

<PageTitle>SS6 Weather</PageTitle>

<h2>Current Conditions Dashboard</h2>

<h6>Update Time: @updateTime UTC</h6>

<div class="container-fluid">
    @if (weatherData != null)
    {
        <div class="row">
            <div class="col-6 col-md-4 col-xl-3">
                <CardDefault CardType="DashboardCardType.Temp"
                    CardValue="@weatherData.Temperature"
                    CardMinValue="@extremeRecords.TemperatureMaxMin.MinValue"
                    CardMinTime="@extremeRecords.TemperatureMaxMin.MinValueTime"
                    CardMaxValue="@extremeRecords.TemperatureMaxMin.MaxValue"
                    CardMaxTime="@extremeRecords.TemperatureMaxMin.MaxValueTime"
                    ImperialUnits="false"/>
            </div>
            <div class="col-6 col-md-4 col-xl-3">
                <CardDefault CardType="DashboardCardType.Humidity"
                    CardValue="@weatherData.Humidity"
                    CardMinValue="@extremeRecords.HumidityMaxMin.MinValue"
                    CardMinTime="@extremeRecords.HumidityMaxMin.MinValueTime"
                    CardMaxValue="@extremeRecords.HumidityMaxMin.MaxValue"
                    CardMaxTime="@extremeRecords.HumidityMaxMin.MaxValueTime"
                    ImperialUnits="false"/>
            </div>
            <div class="col-6 col-md-4 col-xl-3">
                <CardDefault CardType="DashboardCardType.Press"
                    CardValue="@weatherData.SeaLevelPressure"
                    CardMinValue="@extremeRecords.PressureMaxMin.MinValue"
                    CardMinTime="@extremeRecords.PressureMaxMin.MinValueTime"
                    CardMaxValue="@extremeRecords.PressureMaxMin.MaxValue"
                    CardMaxTime="@extremeRecords.PressureMaxMin.MaxValueTime"
                    ImperialUnits="false"/>
            </div>
            <div class="col-6 col-md-4 col-xl-3">
                 <CardDefault CardType="DashboardCardType.Dew"
                    CardValue="@weatherData.DewPoint"
                    CardMinValue="@extremeRecords.DewPointMaxMin.MinValue"
                    CardMinTime="@extremeRecords.DewPointMaxMin.MinValueTime"
                    CardMaxValue="@extremeRecords.DewPointMaxMin.MaxValue"
                    CardMaxTime="@extremeRecords.DewPointMaxMin.MaxValueTime"
                    ImperialUnits="false"/>
            </div>
            <div class="col-6 col-md-4 col-xl-3">
                <CardWind Direction="@weatherData.WindDirection"
                    Speed="@weatherData.AvgWindSpeed"
                    GustSpeed="@weatherData.GustWindSpeed"
                    MaxGustSpeed="@extremeRecords.maxGustWind"
                    MaxGustTime="@extremeRecords.maxGustWindTime"
                    ImperialUnits="false"/>
            </div>
            <div class="col-6 col-md-4 col-xl-3">
                <CardRain HourRain="@weatherData.RainfallTotal"
                    DailyRain="0"
                    RainRate="@weatherData.RainfallRate"
                    MaxRainRate="@extremeRecords.maxRainRate"
                    MaxRateTime="@extremeRecords.maxRainRateTime"
                    ImperialUnits="false"/>
            </div>
        </div>
        
        
        

        

       
    }
    else
    {
        <p><em>Dashboard Loading...</em></p>
    }
</div>



@code{
    private WeatherRecord? weatherData;
    private List<WeatherRecord> weatherRecords = new List<WeatherRecord>();
    private HistoricalRecordData extremeRecords = new HistoricalRecordData();
    private string updateTime => weatherData?.RecordTime.ToString("dd/MM/yyyy HH:mm") ?? "Not Found";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            weatherData = await _client.GetFromJsonAsync<WeatherRecord>("/api/GetMostRecent") ?? new WeatherRecord();
            GetHistoricData(); // Not awaiting this because it is to load data in the background
        }
        catch (Exception ex)
        {

        }
    }

    private async Task GetHistoricData()
    {
        try
        {
            weatherRecords = await _client.GetFromJsonAsync<List<WeatherRecord>>("/api/GetDailyData") ?? new List<WeatherRecord>();
            extremeRecords.NewData(weatherRecords);

            // Work out total rain in last hour, as total rain for previous minute is not helpful
            weatherData.RainfallTotal = 0; //Zero out total for last minute, so to add total for last hour below
            DateTime previousHourStart = DateTime.UtcNow.AddHours(-1);
            int index = 0;
            while (index < weatherRecords.Count && weatherRecords[index].RecordTime >= previousHourStart)
            {
                if (weatherRecords[index].RainfallTotal != -99)
                {
                    weatherData.RainfallTotal += weatherRecords[index].RainfallTotal;
                }
                index++;
            }
            StateHasChanged();
        }
        catch (Exception ex) { } 
    }
}


